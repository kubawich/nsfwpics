<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NSFWpics</name>
    </assembly>
    <members>
        <member name="T:NSFWpics.Pages.API.AddController">
            <summary>
            API endpoint used to upload image/webm/gif to server and index it to db
            </summary>
        </member>
        <member name="T:NSFWpics.Pages.API.UsersController">
            <summary>
            API endpoint route for all actions connected to users in system i.e show/update/login/register/delete
            </summary>
        </member>
        <member name="M:NSFWpics.Pages.API.UsersController.Get">
            <summary>
            Get all users from DB
            </summary>
            <returns>JSON with all users in DB</returns>
        </member>
        <member name="M:NSFWpics.Pages.API.UsersController.Get(System.Int32)">
            <summary>
            Show user data with given id
            </summary>
            <param name="id">User identifeir in DB</param>
            <returns>User data with given id</returns>
        </member>
        <member name="M:NSFWpics.Pages.API.UsersController.Post(System.String,System.String)">
            <summary>
            Endpoint used to Login user to system
            </summary>
            <param name="login">Login used to identify user in system</param>
            <param name="password">SHA1 hash to identify user's identity in DB</param>
            <returns></returns>
        </member>
        <member name="M:NSFWpics.Pages.API.UsersController.Post(System.String,System.String,System.String)">
            <summary>
            Endpoint used to Register new user to system
            </summary>
            <param name="login">Login used to identify user in system</param>
            <param name="password">Password to identify user in DB presented as SHA1 hash</param>
            <param name="mail">Email address to identify user in system</param>
            <returns></returns>
        </member>
        <member name="M:NSFWpics.Pages.API.UsersController.Put(System.Int32,System.String,System.String)">
            <summary>
            Updates user's params in DB (supports only string params atm.)
            </summary>
            <param name="uid">User to update</param>
            <param name="param">name of parameter to change i.e. login/password/mail/uid/guid...</param>
            <param name="value">New value for param field</param>
            <returns>JSON with action status</returns>
        </member>
        <member name="M:NSFWpics.Pages.API.UsersController.Delete(System.Int32)">
            <summary>
            Deletes user with given uid
            </summary>
            <param name="uid">User's id to delete</param>
            <returns>JSON result of delete action</returns>
        </member>
        <member name="M:NSFWpics.Pages.ViewController.Delete(System.Int32,System.String)">
            <summary>
            Removes content with given ID and extension
            </summary>
            <param name="id">ID of content entry to remove</param>
            <param name="extension">Content's file extension in ?extension=png/jpeg/webm... format </param>
            <returns>Json with sucedeed status</returns>
        </member>
        <member name="T:NSFWpics.DBEntities.DBEntity">
            <summary>
            This class is complete framework of tools used in NSFWpics project for managing content as Images, Movies, Users etc. Best use case is invoking it's methods via API endpoint calls
            </summary>
        </member>
        <member name="F:NSFWpics.DBEntities.DBEntity.Instance">
            <summary>
            Static instance of Db entites class, use it wherever you want
            </summary>
        </member>
        <member name="F:NSFWpics.DBEntities.DBEntity.connection">
            <summary>
            DB connection string
            </summary>
        </member>
        <member name="M:NSFWpics.DBEntities.DBEntity.Plus(System.Int32)">
            <summary>
            Increment image's point rating by one
            </summary>
            <param name="ID">Number for identifying image in DB</param>
        </member>
        <member name="M:NSFWpics.DBEntities.DBEntity.Minus(System.Int32)">
            <summary>
            Decrement image's point rating by one
            </summary>
            <param name="ID">Number for identifying image in DB</param>
        </member>
        <member name="M:NSFWpics.DBEntities.DBEntity.MaxId(System.Int32)">
            <summary>
            Gets last ID entrance from DB
            </summary>
            <returns>
            Returns highest ID from DB
            </returns>
        </member>
        <member name="M:NSFWpics.DBEntities.DBEntity.UploadImgToDb(System.Int32,Microsoft.AspNetCore.Http.IFormFile,System.String)">
            <summary>
            Adds cdn's uploaded photo to DB
            </summary>
            <param name="MaxIdPlusOne">Required to increment photo's id in DB</param>l        
            /// <param name="file">File to upload</param>
        </member>
        <member name="M:NSFWpics.DBEntities.DBEntity.UploadImgToQueue(System.Int32,Microsoft.AspNetCore.Http.IFormFile,System.String)">
            <summary>
            Adds cdn's uploaded photo to page's queue
            </summary>
            <param name="MaxIdPlusOne">Required to increment photo's id in DB</param>       
            <param name="file">File to upload</param>
        </member>
        <member name="M:NSFWpics.DBEntities.DBEntity.View(System.Int32,NSFWpics.Pages.Image)">
            <summary>
            Returns image with given id
            </summary>
            <param name="ID">Number for identifying image in DB</param>
            <param name="image">Returns class based on DB table architecture</param>
            <returns>
            Returns Image module from DB with given Image's id
            </returns>
        </member>
        <member name="M:NSFWpics.DBEntities.DBEntity.Best(NSFWpics.Pages.Image)">
            <summary>
            Picks image with highest point rating
            </summary>
            <param name="image">Returns class based on DB table architecture</param>
            <returns>
            Returns Image module from DB where id's highest
            </returns>
        </member>
        <member name="M:NSFWpics.DBEntities.DBEntity.Random(NSFWpics.Pages.Image)">
            <summary>
            Picks number of indicies in database, and next pick random photo from first to maximum.
            </summary>
            <param name="image">Returns class based on DB table architecture</param>
            <returns>
            Image class represtantion filled with random DB entry
            </returns>
        </member>
        <member name="M:NSFWpics.DBEntities.DBEntity.Site(System.Int32,System.Collections.Generic.List{NSFWpics.Pages.Image})">
            <summary>
            Returns whole 'site' module. Each site has 10 view entries
            </summary>
            <param name="id">Which site's entries to get</param>
            <param name="image">Returns class based on DB table architecture</param>
            <returns>
            List of 10 Image entities representing given id's site module
            </returns>
        </member>
        <member name="M:NSFWpics.DBEntities.DBEntity.SiteImgsOnly(System.Int32,System.Collections.Generic.List{NSFWpics.Pages.Image})">
            <summary>
            Returns whole 'site' module, but only image formats. Each site has 10 view entries
            </summary>
            <param name="id">Which site's entries to get</param>
            <param name="image">Returns class based on DB table architecture</param>
            <returns>
            List of 10 Image entities representing given id's site module
            </returns>
        </member>
        <member name="M:NSFWpics.DBEntities.DBEntity.SiteVideosOnly(System.Int32,System.Collections.Generic.List{NSFWpics.Pages.Image})">
            <summary>
            Returns whole 'site' module but animated formats only. Each site has 10 view entries
            </summary>
            <param name="id">Which site's entries to get</param>
            <param name="image">Returns class based on DB table architecture</param>
            <returns>
            List of 10 videos entities representing given id's site module
            </returns>
        </member>
        <member name="M:NSFWpics.DBEntities.DBEntity.Queue(System.Int32,System.Collections.Generic.List{NSFWpics.Pages.Image})">
            <summary>
            Returns whole 'queue' module. Each queue site has 10 view entries
            </summary>
            <param name="id">Which queue site's entries to get</param>
            <param name="image">Returns class based on DB table architecture</param>
            <returns>
            List of 10 Image entities representing given id's queue site module
            </returns>
        </member>
        <member name="M:NSFWpics.DBEntities.DBEntity.RemoveImg(System.Int32,System.String)">
            <summary>
            Removes content with given ID and extension
            </summary>
            <param name="id">ID of content entry to remove</param>
            <param name="extension">Content's file extension in ?extension=png/jpeg/webm... format </param>
        </member>
        <member name="M:NSFWpics.DBEntities.DBEntity.Login(System.String,System.String)">
            <summary>
            Looks for given user in DB to login
            </summary>
            <param name="login">Identifer in DB</param>
            <param name="password">User password</param>
            <returns>String with login status success/failure</returns>
        </member>
        <member name="M:NSFWpics.DBEntities.DBEntity.Register(System.String,System.String,System.String)">
            <summary>
            Registers new user in system
            </summary>
            <param name="login">Login to identify user in system. There can be only one user in system with given Login</param>
            <param name="password">SHA1 hash which reperesents password to identify user why loging to system</param>
            <param name="mail">User's email address</param>
            <returns>Registration proccess status success/failure</returns>
        </member>
        <member name="M:NSFWpics.DBEntities.DBEntity.GetUser(System.Nullable{System.Int32})">
            <summary>
            Returns user data with given id
            </summary>
            <param name="uid"></param>
            <returns>User from DB with given id</returns>
        </member>
        <member name="M:NSFWpics.DBEntities.DBEntity.DeleteUser(System.Int32)">
            <summary>
            Deletes user account with given id
            </summary>
            <param name="uid">User id to delete</param>
            <returns>String status of operation Sucess/Failure</returns>
        </member>
        <member name="M:NSFWpics.DBEntities.DBEntity.UpdateUser(System.Int32,System.String,System.String)">
            <summary>
            Updates/changes user parameter with given id
            </summary>
            <param name="uid">User id to make update on</param>
            <param name="changeParam">Column name to update</param>
            <param name="changeValue">New value for old resource at given column</param>
            <returns>String status of operation Updated/Failed</returns>
        </member>
    </members>
</doc>
